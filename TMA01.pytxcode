=>PYTHONTEX#py#default#0#0#code####q1a.py#1#
import isbnlib
import latextable
import texttable as tt
import re


def vertical(isbn_like):
    # isbn_like = '0303392611'

    index = 1
    rows = [['$i$', '$x_i$', '$ix_i$']]
    sum = 0
    for digit in isbn_like:
        if digit == 'X':
            digit = 10
            sum += index * 10
        else:
            sum += index * int(digit)
        rows.append([index, digit, index * int(digit)])
        index += 1
        if index == len(isbn_like):
            break

    x_10 = sum % 11

    table = tt.Texttable()
    table.set_cols_align(["r", "c", "r"])
    table.set_cols_valign(["m", "m", "m"])
    table.add_rows(rows)

    mytable = latextable.draw_latex(table,
                                    caption="$\sum_{{i=1}}^9 ix_i = {0} \\textrm{{ and }} x_{{10}} \equiv {0} \Mod{{11}} \equiv {1}$.".format(
                                        sum, x_10))
    m = re.sub(r'(^\\begin+\{table\})([a-zA-Z0-9$_\\\W]+)', r'\1[h!]\2', mytable)
    v = is_valid(isbn_like, x_10)
    return m, v


def horizontal(isbn_like):
    """

    :type isbn_like: str
    """
    # isbn_like = '0303392611'

    index = 1
    top_row = ['$i$']
    mid_row = ['$x_i$']
    bot_row = ['$ix_i$']
    for i in range(9):
        top_row.append("${}$".format(i + 1))
        mid_row.append("${}$".format(isbn_like[i]))
    sum = 0
    for digit in isbn_like:
        if digit == 'X':
            digit = 10
            sum += index * 10
        else:
            sum += index * int(digit)
        bot_row.append(index * int(digit))
        index += 1
        if index == len(isbn_like):
            break

    x_10 = sum % 11
    rows = [top_row, mid_row, bot_row]
    table = tt.Texttable()
    table.set_cols_align(['r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r'])
    table.set_cols_valign(['m', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm'])
    table.add_rows(rows)

    mytable = latextable.draw_latex(table, caption="$\sum_{{i=1}}^9 ix_i = {0} \\textrm{{ and }} x_{{10}} \\equiv {0} \Mod{{11}} \equiv {1}$.".format( sum, x_10))
    m = re.sub(r'(^\\begin+\{table\})([a-zA-Z0-9$_\\\W]+)', r'\1[h!]\2', mytable)
    v = is_valid(isbn_like, x_10)
    return m, v


def is_valid(isbn_like, x_10):

    valid   = r'ISBN-10 {} is valid as the calculated value of $x_{{10}}={}$ is equal to the given value of $x_{{10}} =  {}$.'.format(isbn_like, x_10, isbn_like[-1])
    invalid = r"ISBN-10 {} is invalid as the calculated value of $x_{{10}}={}$ is not equal to given value of $x_{{10}} = {}$.".format(isbn_like, x_10, isbn_like[-1])
    if isbnlib.is_isbn10(isbn_like):
        return valid
    else:
        return invalid


isbn1 = '0303392611'
isbn2 = '0099417561'
isbn3 = '1584885086'
isbn4 = '3003392611'
isbn5 = '1584885068'
isbn6 = '048627263X'

isbn_i =   '297?2357099'
isbn_ii =  '2159?7?3011'
isbn_iii = '42??325?897'


isbn_like_1, valid_1 = horizontal(isbn1)
isbn_like_2, valid_2 = horizontal(isbn2)
isbn_like_3, valid_3 = horizontal(isbn3)
isbn_like_4, valid_4 = horizontal(isbn4)
isbn_like_5, valid_5 = horizontal(isbn5)
isbn_like_6, valid_6 = horizontal(isbn6)
=>PYTHONTEX#py#default#0#1#c####q1a.tex#2#
print(isbn1 + r'\endinput')
=>PYTHONTEX#py#default#0#2#c####q1a.tex#2#
print(isbn2 + r'\endinput')
=>PYTHONTEX#py#default#0#3#c####q1a.tex#2#
print(isbn3 + r'\endinput')
=>PYTHONTEX#py#default#0#4#c####q1a.tex#5#
print(isbn_like_1 + r'\endinput')
=>PYTHONTEX#py#default#0#5#c####q1a.tex#7#
print(valid_1 + r'\endinput')
=>PYTHONTEX#py#default#0#6#c####q1a.tex#9#
print(isbn_like_2 + r'\endinput')
=>PYTHONTEX#py#default#0#7#c####q1a.tex#11#
print(valid_2 + r'\endinput')
=>PYTHONTEX#py#default#0#8#c####q1a.tex#13#
print(isbn_like_3 + r'\endinput')
=>PYTHONTEX#py#default#0#9#c####q1a.tex#15#
print(valid_3 + r'\endinput')
=>PYTHONTEX#py#default#0#10#c####q1a.tex#18#
print(isbn1 + r'\endinput')
=>PYTHONTEX#py#default#0#11#c####q1a.tex#18#
print(isbn3 + r'\endinput')
=>PYTHONTEX#py#default#0#12#c####q1a.tex#31#
print(isbn1 + r'\endinput')
=>PYTHONTEX#py#default#0#13#c####q1a.tex#32#
print(isbn_like_4)
=>PYTHONTEX#py#default#0#14#c####q1a.tex#34#
print(valid_4)
=>PYTHONTEX#py#default#0#15#c####q1a.tex#36#
print(isbn3 + r'\endinput')
=>PYTHONTEX#py#default#0#16#c####q1a.tex#37#
print(isbn_like_5 + r'\endinput')
=>PYTHONTEX#py#default#0#17#c####q1a.tex#39#
print(valid_5 + r'\endinput')
=>PYTHONTEX#py#default#0#18#c####q1b.tex#35#
print(0+2*4+3*8+4*6+5*2)
=>PYTHONTEX#py#default#0#19#c####q1b.tex#39#
print(7*2+8*6+9*3+10*10)
=>PYTHONTEX#py#default#0#20#c####q1b.tex#43#
print(0+2*4+3*8+4*6+5*2)
=>PYTHONTEX#py#default#0#21#c####q1b.tex#43#
print(7*2+8*6+9*3+10*10)
=>PYTHONTEX#py#default#0#22#c####q1b.tex#46#
print(0+2*4+3*8+4*6+5*2+7*2+8*6+9*3+10*10)
=>PYTHONTEX#py#default#0#23#c####q1b.tex#49#
print(2*(0+2*4+3*8+4*6+5*2+7*2+8*6+9*3+10*10))
=>PYTHONTEX#py#default#0#24#c####q1b.tex#52#
print(-2*(0+2*4+3*8+4*6+5*2+7*2+8*6+9*3+10*10)%11)
=>PYTHONTEX#py#default#0#25#c####q1b.tex#54#
print(11-2*(0+2*4+3*8+4*6+5*2+7*2+8*6+9*3+10*10)%11)
=>PYTHONTEX#py#default#0#26#c####q1b.tex#57#
print(isbn_like_6 + r'\endinput')
=>PYTHONTEX#py#default#0#27#c####q1b.tex#59#
print(valid_6 + r'\endinput')
=>PYTHONTEX#py#default#0#28#c####q1c.tex#37#
print(isbn_i)
=>PYTHONTEX#py#default#0#29#c####q1c.tex#42#
print(-4*(23 + 183 + 9))
=>PYTHONTEX#py#default#0#29#c####q1c.tex#42#
print(-4*(23 + 183 + 9))
=>PYTHONTEX#py#default#0#30#code####q3a.tex#27#
c = ('00000', '100110','010101','001111','110011','101001','011010','111100')
=>PYTHONTEX#py#default#0#31#c####q3a.tex#32#
print("{}\ {}\ {}\ {}\ {}\ {}\ {}\ {}".format(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7]))
=>PYTHONTEX#py#default#0#31#c####q3a.tex#32#
print("{}\ {}\ {}\ {}\ {}\ {}\ {}\ {}".format(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7]))
=>PYTHONTEX#py#default#0#32#code####q4a.tex#86#
import math
codeword = "113235"
sum = 0
sum1 = 0
sum2 = 0
for i in range(len(codeword)):
	sum += int(codeword[i])
	sum1 += (i+1)*int(codeword[i])
	if (i+1) != 2:
		sum2 += (i+1)*int(codeword[i])
=>PYTHONTEX#py#default#0#33#c####q4a.tex#100#
print(sum)
=>PYTHONTEX#py#default#0#34#c####q4a.tex#100#
print(int(math.fmod(sum,7)))
=>PYTHONTEX#py#default#0#33#c####q4a.tex#100#
print(sum)
=>PYTHONTEX#py#default#0#34#c####q4a.tex#100#
print(int(math.fmod(sum,7)))
=>PYTHONTEX#py#default#0#35#c####q4a.tex#104#
print(sum1)
=>PYTHONTEX#py#default#0#36#c####q4a.tex#104#
print(int(math.fmod(sum1,7)))
=>PYTHONTEX#py#default#0#35#c####q4a.tex#104#
print(sum1)
=>PYTHONTEX#py#default#0#36#c####q4a.tex#104#
print(int(math.fmod(sum1,7)))
=>PYTHONTEX#py#default#0#37#c####q4a.tex#112#
print(-sum2)
=>PYTHONTEX#py#default#0#38#c####q4a.tex#112#
print(int(math.fmod(-sum2,7)))
=>PYTHONTEX#py#default#0#37#c####q4a.tex#112#
print(-sum2)
=>PYTHONTEX#py#default#0#38#c####q4a.tex#112#
print(int(math.fmod(-sum2,7)))
=>PYTHONTEX#py#default#0#39#code####q4a.tex#114#
codeword = "625152"
sum  = 0
sum1 = 0
for i in range(len(codeword)):
	sum += int(codeword[i])
	sum1 += (i+1)*int(codeword[i])
=>PYTHONTEX#py#default#0#40#c####q4a.tex#123#
print(codeword)
=>PYTHONTEX#py#default#0#41#c####q4a.tex#124#
print("a={}".format(int(math.fmod(sum,7))))
=>PYTHONTEX#py#default#0#42#c####q4a.tex#125#
print("b={}".format(int(math.fmod(sum1,7))))
=>PYTHONTEX#py#default#0#43#code####q4c.tex#20#
def Mod(a,b):
	print(int(math.fmod(a,b)))

=>PYTHONTEX#py#default#0#44#c####q4c.tex#28#
print(1*6+2*6+3*6+4*6+5*6+6*6)
=>PYTHONTEX#py#default#0#45#c####q4c.tex#28#
Mod(1*6+2*6+3*6+4*6+5*6+6*6,7)
=>PYTHONTEX#py#default#0#46#c####q4d.tex#62#
print (math.comb(6, 1))
=>PYTHONTEX#py#default#0#47#c####q4d.tex#62#
print (math.comb(6, 2))
=>PYTHONTEX#py#default#0#48#c####q4d.tex#62#
print (math.comb(6, 3))
=>PYTHONTEX#py#default#0#49#c####q4d.tex#62#
print (math.comb(6, 4))
=>PYTHONTEX#py#default#0#50#c####q4d.tex#69#
print(7**4 -(6 * 7**3 - 15 * 7**2 + 20 * 7**1 - 15 * 7**0))
=>PYTHONTEX#py#default#0#51#code####q4e.tex#2#
a = math.comb(10, 1)*11**7
b = math.comb(10, 2)*11**6
c = math.comb(10, 3)*11**5
d = math.comb(10, 4)*11**4
e = math.comb(10, 5)*11**3
f = math.comb(10, 6)*11**2
g = math.comb(10, 7)*11**1
h = math.comb(10, 8)*11**0

y = a -b + c- d +e -f +g -h
z = 11**8 - y
=>PYTHONTEX#py#default#0#52#c####q4e.tex#18#
print(1*6+2*6+3*6+4*6+5*6+6*6+7*6+8*6+9*6+10*6)
=>PYTHONTEX#py#default#0#53#c####q4e.tex#18#
Mod(1*6+2*6+3*6+4*6+5*6+6*6+7*6+8*6+9*6+10*6,11)
=>PYTHONTEX#py#default#0#54#c####q4e.tex#23#
Mod(60,11)
=>PYTHONTEX#py#default#0#55#c####q4e.tex#27#
print(z)
=>PYTHONTEX:SETTINGS#
version=0.17
outputdir=pythontex-files-TMA01
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=true
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
